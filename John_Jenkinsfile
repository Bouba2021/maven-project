pipeline {
    agent {
        label 'jenkins-node'
    }


    /// Creating environment variables for dockerhub login
    environment {
        DOCKERHUB_CREDENTIALS=credentials('dockerhub')
        
    }
    options { buildDiscarder(logRotator(artifactDaysToKeepStr: '', 
    artifactNumToKeepStr: '', daysToKeepStr: '3', numToKeepStr: '5'))
    disableConcurrentBuilds() }


    /// Setting up paramenters for our image tag
    stages {

        stage('Setup parameters') {
            steps {
                script { 
                    properties([
                        parameters([
                          

                            string(
                                defaultValue: '001', 
                                name: 'ImageTAG', 
                                trim: true
                            )
                        ])
                    ])
                }
            }
        }

       
        /// Starting with maven Build steps (clean, compile, validate, test, package, verify & install)
        stage('clean') {
            agent {
                 docker { image 'maven:3.8.5-openjdk-8-slim' }
             }

            steps {
               sh '''
               rm -rf webapp/target/webapp.war || true
              mvn clean
               '''
            }
        }

        stage('compile') {
            agent {
                 docker { image 'maven:3.8.5-openjdk-8-slim' }
             }

            steps {
               sh '''
             mvn compile
               '''
            }
        }

stage('validate') {
    agent {
                 docker { image 'maven:3.8.5-openjdk-8-slim' }
             }

            steps {
               sh '''
               mvn validate
               '''
            }
        }



stage('test') {
    agent {
                 docker { image 'maven:3.8.5-openjdk-8-slim' }
             }

            steps {
               sh '''
             mvn test 
               '''
            }
        }

stage('package') {
    agent {
                 docker { image 'maven:3.8.5-openjdk-8-slim' }
             }

            steps {
               sh '''
            
              mvn package
              ls -l webapp/target
              pwd
               '''
            }
        }

stage('verify') {
    agent {
                 docker { image 'maven:3.8.5-openjdk-8-slim' }
             }

            steps {
               sh '''
              mvn verify
               '''
            }
        }


stage('install') {
    agent {
                 docker { image 'maven:3.8.5-openjdk-8-slim' }
             }

            steps {
               sh '''
           mvn install
               '''
            }
        }

///// Passing SonarQube analysis - Make sure to Update the SonarQube Properties with the your company SQ URL and also add your project name & project key.
stage('SonarQube analysis') {
            agent {
                docker {

                  image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
               }
               environment {
        CI = 'true'
        scannerHome='/opt/sonar-scanner'
    }
            steps{
                withSonarQubeEnv('Sonar') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

       
stage('build ') {

            steps {
               sh '''
           docker build --tag devopseasylearning2021/ducobu:$ImageTAG .
               '''
            }
        }

/// Passing the variables created above for dockerhub login
stage('Docker login'){
            steps {

                script {

                     withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'password', usernameVariable: 'username')]){
                         sh '''
                            echo "${password} | docker login -u ${username} --password-stdin"
                         '''

                     }
                }
            }
        }



/// Passing image tag variable created above
stage('Docker push') {
            steps {
                sh '''
                docker push devopseasylearning2021/ducobu:$ImageTAG
                '''
            }
        }

    }


}
       
    

    
